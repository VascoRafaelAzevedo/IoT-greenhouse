name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-test:
    runs-on: ubuntu-latest
    env:
      CI: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Copy env example
        run: cp .env.example .env

      - name: Build images
        run: docker compose -f docker-compose.yml build --parallel

      - name: Start core stack (DB + MQTT + API + consumer)
        run: docker compose -f docker-compose.yml up -d postgres mosquitto api consumer

      - name: Wait for Postgres healthy
        run: |
          for i in {1..25}; do
            STATUS=$(docker inspect -f '{{json .State.Health.Status}}' gardenaway-postgres || echo '"starting"');
            echo "Postgres health: $STATUS";
            if [ "$STATUS" = '"healthy"' ]; then exit 0; fi; sleep 3;
          done; echo "Postgres not healthy in time"; docker logs gardenaway-postgres; exit 1

      - name: Verify required extensions
        run: |
          docker exec gardenaway-postgres psql -U ${DB_USER:-postgres} -d ${DB_NAME:-greenhouse} -tAc "SELECT extname FROM pg_extension WHERE extname='timescaledb'" | grep timescaledb || (echo 'timescaledb extension missing' && exit 1)

      - name: List tables (debug)
        run: docker exec gardenaway-postgres psql -U ${DB_USER:-postgres} -d ${DB_NAME:-greenhouse} -c "\\dt"

      - name: Assert core tables exist
        run: |
          set -e
          REQUIRED="timezone app_user greenhouse setpoint connection_event telemetry"
          echo "Verifying core tables..."
          for t in $REQUIRED; do
            echo "Checking table: $t"
            docker exec gardenaway-postgres psql -U ${DB_USER:-postgres} -d ${DB_NAME:-greenhouse} -v ON_ERROR_STOP=1 -tAc \
              "SELECT relname FROM pg_catalog.pg_class c JOIN pg_namespace n ON n.oid=c.relnamespace \
               WHERE n.nspname='public' AND c.relkind='r' AND relname='${t}'" | grep -qx "${t}" || {
                 echo "Missing table ${t}. Debug info:"
                 docker exec gardenaway-postgres psql -U ${DB_USER:-postgres} -d ${DB_NAME:-greenhouse} -c "\dt public.${t}"
                 docker exec gardenaway-postgres psql -U ${DB_USER:-postgres} -d ${DB_NAME:-greenhouse} -c \
                   "SELECT oid, relkind, relname FROM pg_class WHERE relname='${t}'"
                 exit 1
               }
          done
          echo "All core tables present."

      - name: Strict seed validation
        run: |
          set -e
          echo "Validating seeded row counts..."
          declare -A expected
          expected[timezone]=26
          expected[app_user]=2
          expected[greenhouse]=4
          expected[setpoint]=7
          expected[connection_event]=10
          expected[telemetry]=10
          for table in "${!expected[@]}"; do
            count=$(docker exec gardenaway-postgres psql -U ${DB_USER:-postgres} -d ${DB_NAME:-greenhouse} -tAc "SELECT count(*) FROM $table" | tr -d '[:space:]')
            echo "$table => $count (expected ${expected[$table]})"
            if [ "$count" != "${expected[$table]}" ]; then
              echo "FAIL: Table $table expected ${expected[$table]} rows, found $count"
              exit 1
            fi
          done

          echo "Checking specific seed values (emails)..."
          docker exec gardenaway-postgres psql -U ${DB_USER:-postgres} -d ${DB_NAME:-greenhouse} -tAc \
            "SELECT 1 FROM app_user WHERE email='vasco@example.com'" | grep -q 1 || { echo 'Missing vasco@example.com'; exit 1; }
          docker exec gardenaway-postgres psql -U ${DB_USER:-postgres} -d ${DB_NAME:-greenhouse} -tAc \
            "SELECT 1 FROM app_user WHERE email='maria@example.com'" | grep -q 1 || { echo 'Missing maria@example.com'; exit 1; }
          

          echo "Verifying telemetry hypertable..."
          docker exec gardenaway-postgres psql -U ${DB_USER:-postgres} -d ${DB_NAME:-greenhouse} -tAc \
            "SELECT hypertable_name FROM timescaledb_information.hypertables WHERE hypertable_schema='public' AND hypertable_name='telemetry'" | grep -q telemetry \
            || { echo 'telemetry is not a hypertable'; exit 1; }

          echo "Checking insert blocker trigger presence (optional)..."
          docker exec gardenaway-postgres psql -U ${DB_USER:-postgres} -d ${DB_NAME:-greenhouse} -tAc \
            "SELECT 1 FROM pg_trigger WHERE tgname='ts_insert_blocker'" | grep -q 1 \
            || { echo 'Trigger ts_insert_blocker missing'; exit 1; }

          echo "Seed validation PASSED."

      - name: API health endpoint
        run: |
          for i in {1..15}; do curl -fsS http://localhost:${API_PORT:-5000}/health && exit 0 || sleep 2; done; echo 'API health failed'; docker logs gardenaway-api; exit 1

      - name: MQTT broker smoke test (publish/subscribe)
        run: |
          docker exec gardenaway-mosquitto sh -c "(mosquitto_sub -t ci/test -C 1 > /tmp/ci_msg.out &) ; sleep 1; mosquitto_pub -t ci/test -m ci-ok; sleep 2; cat /tmp/ci_msg.out" | grep ci-ok || (echo 'MQTT smoke test failed' && exit 1)

      - name: Show running containers
        run: docker compose -f docker-compose.yml ps

      - name: Logs on failure
        if: failure()
        run: docker compose -f docker-compose.yml logs --tail=300

      - name: Tear down
        if: always()
        run: docker compose -f docker-compose.yml down -v
